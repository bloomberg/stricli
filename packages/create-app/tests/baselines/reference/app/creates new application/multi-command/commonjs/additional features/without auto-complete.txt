[STDOUT]

[STDERR]

[FILES]
::::/root/test/.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

*.tsbuildinfo
dist

::::/root/test/package.json
{
  "name": "test",
  "author": "",
  "description": "Stricli command line application",
  "license": "MIT",
  "type": "commonjs",
  "version": "0.0.0",
  "files": [
    "dist"
  ],
  "bin": {
    "test": "dist/cli.js"
  },
  "engines": {
    "node": ">=20"
  },
  "scripts": {
    "prebuild": "tsc -p src/tsconfig.json",
    "build": "tsup",
    "prepublishOnly": "npm run build"
  },
  "tsup": {
    "entry": [
      "src/bin/cli.ts"
    ],
    "format": [
      "cjs"
    ],
    "tsconfig": "src/tsconfig.json",
    "clean": true,
    "splitting": true,
    "minify": true
  },
  "dependencies": {
    "@stricli/core": "<self>"
  },
  "devDependencies": {
    "@types/node": "20.x",
    "tsup": "^6.7.0",
    "typescript": "5.6.x"
  }
}
::::/root/test/src/app.ts
import { buildApplication, buildRouteMap } from "@stricli/core";
import { name, version, description } from "../package.json";
import { subdirCommand } from "./commands/subdir/command";
import { nestedRoutes } from "./commands/nested/commands";

const routes = buildRouteMap({
  routes: {
    subdir: subdirCommand,
    nested: nestedRoutes,
  },
  docs: {
    brief: description,
  },
});

export const app = buildApplication(routes, {
  name,
  versionInfo: {
    currentVersion: version,
  },
});

::::/root/test/src/bin/cli.ts
#!/usr/bin/env node
import { run } from "@stricli/core";
import { buildContext } from "../context";
import { app } from "../app";
void run(app, process.argv.slice(2), buildContext(process));

::::/root/test/src/commands/nested/commands.ts
import { buildCommand, buildRouteMap } from "@stricli/core";

export const fooCommand = buildCommand({
  loader: async () => {
    const { foo } = await import("./impl");
    return foo;
  },
  parameters: {
    positional: {
      kind: "tuple",
      parameters: [],
    },
  },
  docs: {
    brief: "Nested foo command",
  },
});

export const barCommand = buildCommand({
  loader: async () => {
    const { bar } = await import("./impl");
    return bar;
  },
  parameters: {
    positional: {
      kind: "tuple",
      parameters: [],
    },
  },
  docs: {
    brief: "Nested bar command",
  },
});

export const nestedRoutes = buildRouteMap({
  routes: {
    foo: fooCommand,
    bar: barCommand,
  },
  docs: {
    brief: "Nested commands",
  },
});

::::/root/test/src/commands/nested/impl.ts
import type { LocalContext } from "../../context";

interface FooCommandFlags {
  // ...
}

export async function foo(this: LocalContext, flags: FooCommandFlags): Promise<void> {
  // ...
}

interface BarCommandFlags {
  // ...
}

export async function bar(this: LocalContext, flags: BarCommandFlags): Promise<void> {
  // ...
}

::::/root/test/src/commands/subdir/command.ts
import { buildCommand } from "@stricli/core";

export const subdirCommand = buildCommand({
  loader: async () => import("./impl"),
  parameters: {
    positional: {
      kind: "tuple",
      parameters: [],
    },
  },
  docs: {
    brief: "Command in subdirectory",
  },
});

::::/root/test/src/commands/subdir/impl.ts
import type { LocalContext } from "../../context";

interface SubdirCommandFlags {
  // ...
}

export default async function(this: LocalContext, flags: SubdirCommandFlags): Promise<void> {
  // ...
}

::::/root/test/src/context.ts
import type { CommandContext } from "@stricli/core";

export interface LocalContext extends CommandContext {
  readonly process: NodeJS.Process;
  // ...
}

export function buildContext(process: NodeJS.Process): LocalContext {
  return {
    process,
  };
}

::::/root/test/src/tsconfig.json
{
  "compilerOptions": {
    "noEmit": true,
    "rootDir": "..",
    "types": [
      "node"
    ],
    "resolveJsonModule": true,
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "bundler",
    "lib": [
      "esnext"
    ],
    "skipLibCheck": true,
    "strict": true,
    "isolatedModules": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noUncheckedIndexedAccess": true,
    "verbatimModuleSyntax": true
  },
  "include": [
    "**/*"
  ],
  "exclude": []
}