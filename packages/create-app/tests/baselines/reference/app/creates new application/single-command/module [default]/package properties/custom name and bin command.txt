[STDOUT]

[STDERR]

[FILES]
::::/root/test/.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

*.tsbuildinfo
dist

::::/root/test/package.json
{
  "name": "@org/test-cli",
  "author": "",
  "description": "Stricli command line application",
  "license": "MIT",
  "type": "module",
  "version": "0.0.0",
  "files": [
    "dist"
  ],
  "bin": {
    "test-cli": "dist/cli.js",
    "__test-cli_bash_complete": "dist/bash-complete.js"
  },
  "engines": {
    "node": ">=20"
  },
  "scripts": {
    "prebuild": "tsc -p src/tsconfig.json",
    "build": "tsup",
    "prepublishOnly": "npm run build",
    "postinstall": "npx @stricli/auto-complete@latest install test-cli __test-cli_bash_complete"
  },
  "tsup": {
    "entry": [
      "src/bin/cli.ts",
      "src/bin/bash-complete.ts"
    ],
    "format": [
      "esm"
    ],
    "tsconfig": "src/tsconfig.json",
    "clean": true,
    "splitting": true,
    "minify": true
  },
  "dependencies": {
    "@stricli/core": "<self>",
    "@stricli/auto-complete": "<self>"
  },
  "devDependencies": {
    "@types/node": "20.x",
    "tsup": "^6.7.0",
    "typescript": "5.6.x"
  }
}
::::/root/test/src/app.ts
import { buildApplication, buildCommand, numberParser } from "@stricli/core";
import { name, version, description } from "../package.json";

const command = buildCommand({
  loader: async () => import("./impl"),
  parameters: {
    positional: {
      kind: "tuple",
      parameters: [
        {
          brief: "Your name",
          parse: String,
        },
      ],
    },
    flags: {
      count: {
        kind: "parsed",
        brief: "Number of times to say hello",
        parse: numberParser,
      },
    },
  },
  docs: {
    brief: description,
  },
});

export const app = buildApplication(command, {
  name,
  versionInfo: {
    currentVersion: version,
  },
});

::::/root/test/src/bin/bash-complete.ts
#!/usr/bin/env node
import { proposeCompletions } from "@stricli/core";
import { buildContext } from "../context";
import { app } from "../app";
const inputs = process.argv.slice(3);
if (process.env["COMP_LINE"]?.endsWith(" ")) {
  inputs.push("");
}
await proposeCompletions(app, inputs, buildContext(process));

::::/root/test/src/bin/cli.ts
#!/usr/bin/env node
import { run } from "@stricli/core";
import { buildContext } from "../context";
import { app } from "../app";
await run(app, process.argv.slice(2), buildContext(process));

::::/root/test/src/context.ts
import type { CommandContext } from "@stricli/core";
import type { StricliAutoCompleteContext } from "@stricli/auto-complete";
import fs from "node:fs";
import os from "node:os";
import path from "node:path";

export interface LocalContext extends CommandContext, StricliAutoCompleteContext {
  readonly process: NodeJS.Process;
  // ...
}

export function buildContext(process: NodeJS.Process): LocalContext {
  return {
    process,
    os,
    fs,
    path,
  };
}

::::/root/test/src/impl.ts
import type { LocalContext } from "./context";

interface CommandFlags {
  readonly count: number;
}

export default async function(this: LocalContext, flags: CommandFlags, name: string): Promise<void> {
  this.process.stdout.write(`Hello ${name}!\n`.repeat(flags.count));
}

::::/root/test/src/tsconfig.json
{
  "compilerOptions": {
    "noEmit": true,
    "rootDir": "..",
    "types": [
      "node"
    ],
    "resolveJsonModule": true,
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "bundler",
    "lib": [
      "esnext"
    ],
    "skipLibCheck": true,
    "strict": true,
    "isolatedModules": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noUncheckedIndexedAccess": true,
    "verbatimModuleSyntax": true
  },
  "include": [
    "**/*"
  ],
  "exclude": []
}